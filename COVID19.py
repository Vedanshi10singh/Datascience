# -*- coding: utf-8 -*-
"""chartrepresentaio .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SiqqCoOYlv4ap4sdmFYhkaFfEAZXBdT
"""

nimport kagglehub

path = kagglehub.dataset_download("imdevskp/corona-virus-report")

print("Path to dataset files:", path)

from google.colab import files
uploaded=files.upload()

import pandas as pd
df=pd.read_csv('Covid Dataset.csv')
print(df)

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report,confusion_matrix, roc_auc_score, mean_squared_error,r2_score, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import tree
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn.ensemble import RandomForestRegressor

print(df.columns)

print(df['COVID-19'])

import pandas as pd
df=pd.read_csv('Covid Dataset.csv')
yes_count=(df['COVID-19'].value_counts().get('Yes',0))
print('number of rows with yes:',yes_count)

no_count=(df['COVID-19'].value_counts().get('No',0))
print('number of rows with no:',no_count)

df.head()

df.shape

df.info()

df.describe()

df.transpose()

df.head(20)

df.tail(20)

a=df.isnull().sum() #for missing value
a

apercentage=df.isnull().sum()*100/len(df)#missing percentage
apercentage

value={'miss:':a,'%':apercentage}
frame=pd.DataFrame(value)
print(frame)

sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Pastel1')

ax=sns.countplot(x='Fever',data=df,palette='PuRd')
for p in ax.patches:
  ax.annotate(f'/n{p.get_height()}',(p.get_x()+0.4, p.get_height()+100),ha='center',va='top')
  plt.show()



ax=sns.countplot(x='Dry Cough', hue='Fever',data=df)
for p in ax.patches:
  ax.annotate(f'/n{p.get_height()}',(p.get_x()+0.4, p.get_height()+100),ha='center',va='top')
  plt.show()

ax=sns.countplot(x='Dry Cough',data=df,palette='PuRd')
for p in ax.patches:
  ax.annotate(f'/n{p.get_height()}',(p.get_x()+0.4, p.get_height()+100),ha='center',va='top')
  plt.show()

ax=sns.countplot(x='Dry Cough', hue='Fever',data=df)
for p in ax.patches:
  ax.annotate(f'/n{p.get_height()}',(p.get_x()+0.4, p.get_height()+100),ha='center',va='top')
  plt.show()



e=LabelEncoder()

df['Breathing Problem']=e.fit_transform(df['Breathing Problem'])

print(df)

# prompt: df.head()

df.head()

df['Wearing Masks']=e.fit_transform(df['Wearing Masks'])

print(df)

df['COVID-19']=e.fit_transform(df['COVID-19'])

print(df)

df.hist(figsize=(20,15));
print(df['Wearing Masks'].value_counts())
sns.countplot(x='Wearing Masks',data=df)

# Strip any leading/trailing whitespace from column names
df.columns = df.columns.str.strip()

# List of categorical columns to encode
categorical_columns = [
    'Breathing Problem', 'Fever', 'Dry Cough', 'Sore throat', 'Running Nose',
    'Asthma', 'Chronic Lung Disease', 'Headache', 'Heart Disease',
    'Diabetes', 'Hyper Tension', 'Abroad travel',
    'Contact with COVID Patient', 'Attended Large Gathering',
    'Visited Public Exposed Places', 'Family working in Public Exposed Places',
    'Wearing Masks', 'Sanitization from Market', 'COVID-19',
    'Gastrointestinal', 'Fatigue'
]

# Apply LabelEncoder to each column
for col in categorical_columns:
    df[col] = e.fit_transform(df[col])
print(df)



df.hist(figsize=(20,15));
print(df['Wearing Masks'].value_counts())
sns.countplot(x='Wearing Masks',data=df)

df.columns

x=covid_data.drop(['COVID-19'],axis=1)
y=covid_data['COVID-19']
x_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

